<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="badM3u8" xml:space="preserve">
    <value>错误的m3u8</value>
  </data>
  <data name="notSupported" xml:space="preserve">
    <value>当前输入不受支持: </value>
  </data>
  <data name="loadingUrl" xml:space="preserve">
    <value>加载URL: </value>
  </data>
  <data name="matchHLS" xml:space="preserve">
    <value>内容匹配: [white on deepskyblue1]HTTP Live Streaming[/]</value>
  </data>
  <data name="masterM3u8Found" xml:space="preserve">
    <value>检测到Master列表，开始解析全部流信息</value>
  </data>
  <data name="fetch" xml:space="preserve">
    <value>获取: </value>
  </data>
  <data name="promptTitle" xml:space="preserve">
    <value>请选择 [green]你要下载的内容[/]:</value>
  </data>
  <data name="promptChoiceText" xml:space="preserve">
    <value>[grey](按键盘上下键以浏览更多内容)[/]</value>
  </data>
  <data name="promptInfo" xml:space="preserve">
    <value>(按 [blue]空格键[/] 选择流, [green]回车键[/] 完成选择)</value>
  </data>
  <data name="streamsInfo" xml:space="preserve">
    <value>已解析, 共计 {} 条媒体流, 基本流 {} 条, 可选音频流 {} 条, 可选字幕流 {} 条</value>
  </data>
  <data name="liveFound" xml:space="preserve">
    <value>检测到直播流</value>
  </data>
  <data name="selectedStream" xml:space="preserve">
    <value>已选择的流:</value>
  </data>
  <data name="writeJson" xml:space="preserve">
    <value>写出meta.json</value>
  </data>
  <data name="matchDASH" xml:space="preserve">
    <value>内容匹配: [white on mediumorchid1]Dynamic Adaptive Streaming over HTTP[/]</value>
  </data>
  <data name="checkingLast" xml:space="preserve">
    <value>验证最后一个分片有效性</value>
  </data>
  <data name="parsingStream" xml:space="preserve">
    <value>正在解析媒体信息...</value>
  </data>
  <data name="keyProcessorNotFound" xml:space="preserve">
    <value>找不到支持的Processor</value>
  </data>
  <data name="startDownloading" xml:space="preserve">
    <value>开始下载...</value>
  </data>
  <data name="segmentCountCheckNotPass" xml:space="preserve">
    <value>分片数量校验不通过, 共{}个,已下载{}.</value>
  </data>
  <data name="fixingVTT" xml:space="preserve">
    <value>正在提取VTT(raw)字幕...</value>
  </data>
  <data name="fixingVTTmp4" xml:space="preserve">
    <value>正在提取VTT(mp4)字幕...</value>
  </data>
  <data name="binaryMerge" xml:space="preserve">
    <value>二进制合并中...</value>
  </data>
  <data name="fixingTTMLmp4" xml:space="preserve">
    <value>正在提取TTML(mp4)字幕...</value>
  </data>
  <data name="fixingTTML" xml:space="preserve">
    <value>正在提取TTML(raw)字幕...</value>
  </data>
  <data name="cmd_Input" xml:space="preserve">
    <value>链接或文件</value>
  </data>
  <data name="cmd_header" xml:space="preserve">
    <value>为HTTP请求设置特定的请求头, 例如:
 -H "Cookie: mycookie" -H "User-Agent: iOS"</value>
  </data>
  <data name="cmd_logLevel" xml:space="preserve">
    <value>设置日志级别</value>
  </data>
  <data name="cmd_autoSelect" xml:space="preserve">
    <value>自动选择所有类型的最佳轨道</value>
  </data>
  <data name="cmd_subOnly" xml:space="preserve">
    <value>只选取字幕轨道</value>
  </data>
  <data name="cmd_threadCount" xml:space="preserve">
    <value>设置下载线程数</value>
  </data>
  <data name="cmd_skipMerge" xml:space="preserve">
    <value>跳过合并分片</value>
  </data>
  <data name="cmd_binaryMerge" xml:space="preserve">
    <value>二进制合并</value>
  </data>
  <data name="cmd_delAfterDone" xml:space="preserve">
    <value>完成后删除临时文件</value>
  </data>
  <data name="cmd_subtitleFix" xml:space="preserve">
    <value>自动修正字幕</value>
  </data>
  <data name="cmd_checkSegmentsCount" xml:space="preserve">
    <value>检测实际下载的分片数量和预期数量是否匹配</value>
  </data>
  <data name="cmd_subFormat" xml:space="preserve">
    <value>字幕输出类型</value>
  </data>
  <data name="cmd_tmpDir" xml:space="preserve">
    <value>设置临时文件存储目录</value>
  </data>
  <data name="cmd_saveDir" xml:space="preserve">
    <value>设置输出目录</value>
  </data>
  <data name="cmd_saveName" xml:space="preserve">
    <value>设置保存文件名</value>
  </data>
  <data name="cmd_uiLanguage" xml:space="preserve">
    <value>设置UI语言</value>
  </data>
  <data name="cmd_skipDownload" xml:space="preserve">
    <value>跳过下载</value>
  </data>
  <data name="cmd_writeMetaJson" xml:space="preserve">
    <value>解析后的信息是否输出json文件</value>
  </data>
  <data name="cmd_appendUrlParams" xml:space="preserve">
    <value>将输入Url的Params添加至分片, 对某些网站很有用, 例如 kakao.com</value>
  </data>
</root>