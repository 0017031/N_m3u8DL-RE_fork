<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="badM3u8" xml:space="preserve">
    <value>Bad m3u8</value>
  </data>
  <data name="notSupported" xml:space="preserve">
    <value>Input not supported: </value>
  </data>
  <data name="loadingUrl" xml:space="preserve">
    <value>Loading URL: </value>
  </data>
  <data name="matchHLS" xml:space="preserve">
    <value>Content Matched: [white on deepskyblue1]HTTP Live Streaming[/]</value>
  </data>
  <data name="masterM3u8Found" xml:space="preserve">
    <value>Master List detected, try parse all streams</value>
  </data>
  <data name="fetch" xml:space="preserve">
    <value>Fetch: </value>
  </data>
  <data name="promptTitle" xml:space="preserve">
    <value>Please select [green]what you want to download[/]:</value>
  </data>
  <data name="promptChoiceText" xml:space="preserve">
    <value>[grey](Move up and down to reveal more streams)[/]</value>
  </data>
  <data name="promptInfo" xml:space="preserve">
    <value>(Press [blue]&lt;space&gt;[/] to toggle a stream, [green]&lt;enter&gt;[/] to accept)</value>
  </data>
  <data name="streamsInfo" xml:space="preserve">
    <value>Extracted, there are {} streams, with {} basic streams, {} audio streams, {} subtitle streams</value>
  </data>
  <data name="liveFound" xml:space="preserve">
    <value>Live stream found</value>
  </data>
  <data name="selectedStream" xml:space="preserve">
    <value>Selected streams:</value>
  </data>
  <data name="writeJson" xml:space="preserve">
    <value>Writing meta.json</value>
  </data>
  <data name="matchDASH" xml:space="preserve">
    <value>Content Matched: [white on mediumorchid1]Dynamic Adaptive Streaming over HTTP[/]</value>
  </data>
  <data name="checkingLast" xml:space="preserve">
    <value>Verifying the validity of the last segment</value>
  </data>
  <data name="parsingStream" xml:space="preserve">
    <value>Parsing streams...</value>
  </data>
  <data name="keyProcessorNotFound" xml:space="preserve">
    <value>No Processor matched</value>
  </data>
  <data name="startDownloading" xml:space="preserve">
    <value>Start downloading...</value>
  </data>
  <data name="segmentCountCheckNotPass" xml:space="preserve">
    <value>Segment count check not pass, total: {}, downloaded: {}.</value>
  </data>
  <data name="fixingVTT" xml:space="preserve">
    <value>Extracting VTT(raw) subtitle...</value>
  </data>
  <data name="fixingVTTmp4" xml:space="preserve">
    <value>Extracting VTT(mp4) subtitle...</value>
  </data>
  <data name="binaryMerge" xml:space="preserve">
    <value>Binary merging...</value>
  </data>
  <data name="fixingTTMLmp4" xml:space="preserve">
    <value>Extracting TTML(mp4) subtitle...</value>
  </data>
  <data name="fixingTTML" xml:space="preserve">
    <value>Extracting TTML(raw) subtitle...</value>
  </data>
  <data name="cmd_Input" xml:space="preserve">
    <value>Input Url or File</value>
  </data>
  <data name="cmd_header" xml:space="preserve">
    <value>Pass custom header(s) to server, Example:
 -H "Cookie: mycookie" -H "User-Agent: iOS"</value>
  </data>
  <data name="cmd_logLevel" xml:space="preserve">
    <value>Set log level</value>
  </data>
  <data name="cmd_autoSelect" xml:space="preserve">
    <value>Automatically selects the best tracks of all types</value>
  </data>
  <data name="cmd_subOnly" xml:space="preserve">
    <value>Select only subtitle tracks</value>
  </data>
  <data name="cmd_threadCount" xml:space="preserve">
    <value>Set download thread count</value>
  </data>
  <data name="cmd_skipMerge" xml:space="preserve">
    <value>Skip segments merge</value>
  </data>
  <data name="cmd_binaryMerge" xml:space="preserve">
    <value>Binary merge</value>
  </data>
  <data name="cmd_delAfterDone" xml:space="preserve">
    <value>Delete temporary files when done</value>
  </data>
  <data name="cmd_subtitleFix" xml:space="preserve">
    <value>Automatically fix subtitles</value>
  </data>
  <data name="cmd_checkSegmentsCount" xml:space="preserve">
    <value>Check if the actual number of segments downloaded matches the expected number</value>
  </data>
  <data name="cmd_subFormat" xml:space="preserve">
    <value>Subtitle output format</value>
  </data>
  <data name="cmd_tmpDir" xml:space="preserve">
    <value>Set temporary file directory</value>
  </data>
  <data name="cmd_saveDir" xml:space="preserve">
    <value>Set output directory</value>
  </data>
  <data name="cmd_saveName" xml:space="preserve">
    <value>Set output filename</value>
  </data>
  <data name="cmd_uiLanguage" xml:space="preserve">
    <value>Set UI language</value>
  </data>
  <data name="cmd_skipDownload" xml:space="preserve">
    <value>Skip download</value>
  </data>
</root>